{"version":3,"sources":["common/Navbar.tsx","common/Footer.tsx","common/Banner.tsx","services/military-to-standard-time.ts","containers/Results.tsx","services/future-date-strings.ts","services/date-object-to-stamp.ts","common/Listing-Details-Profile.tsx","services/accepted-payments.ts","common/Listing-Details.tsx","containers/Listing.tsx","containers/Account.tsx","containers/Create.tsx","containers/RSVP.tsx","services/get-listing-from-hash.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","props","className","to","onChange","event","setSearchCity","target","value","placeholder","type","searchCity","setSearchState","searchState","states","map","state","key","toUpperCase","src","alt","Footer","Banner","military","Results","city","toLocaleLowerCase","codes","listings","zipcodes","length","dates","start","date","Date","month","getMonth","day","getDate","year","getFullYear","num","dayString","toString","monthString","dateString","push","futureDateStrings","forEach","code","dinners","Object","keys","time","uid","listing","uri","index","onClick","setSelectedListing","title","description","militaryToStandardTime","plates","price","ListingDetailsProfile","profile","Profiles","payment","personal","name","street","payments","filtered","filter","string","charAt","slice","join","acceptedPayments","ListingDetails","dateObjectToStamp","Listing","window","location","hash","replace","selectedListing","node","Dinners","path","split","some","Account","useState","createAccountToggle","setCreateAccountToggle","errorMessage","setErrorMessage","successMessage","setSuccessMessage","delayedMessageReset","setTimeout","currentUser","currentProfile","zipcode","email","cash","venmo","cashapp","paypal","onSubmit","preventDefault","form","querySelector","accepted","querySelectorAll","elem","indexOf","Number","isZipcodeValid","Promise","all","res","firebase","ref","set","then","catch","error","message","once","snapshot","setCurrentProfile","val","zipcodeToStateAndCity","id","defaultValue","disabled","defaultChecked","signOut","a","async","password","reenter","user","createUserWithEmailAndPassword","signInWithEmailAndPassword","creds","template","host","eaten","reviews","left","recieved","setCurrentUser","Create","RSVP","confirmed","setConfirmed","parts","part","getListingFromHash","miltaryToStandardTime","App","firebaseConfig","onAuthStateChanged","exact","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.333ac0fb.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.scss';\nimport states from '../assets/states.json';\nimport { Link } from 'react-router-dom';\n\ninterface NavbarProps {\n  setSearchState: any;\n  searchState: string;\n  setSearchCity: any;\n  searchCity: string;\n}\n\nconst Navbar: React.FC<NavbarProps> = props => {\n\n  const searchStateHandler = (event: any): void => {\n    props.setSearchState(event.target.value);\n  }\n\n  const searchCityHandler = (event: any): void => {\n    props.setSearchCity(event.target.value);\n  }\n\n  return (\n    <nav className=\"Navbar\">\n      <div>\n        <Link to=\"/\">DINR</Link>\n      </div>\n      <div>\n        <input\n          onChange={searchCityHandler}\n          placeholder=\"City\"\n          type=\"text\"\n          value={props.searchCity || ''} />\n        <select\n          onChange={searchStateHandler}\n          value={props.searchState || ''}\n          >\n          {\n            states.map((state: string) => {\n              return (\n                <option\n                  key={state}\n                  value={state}\n                >\n                  {state.toUpperCase()}\n                </option>\n              );\n            })\n          }\n        </select>\n      </div>\n      <div>\n        <Link to=\"/account\">\n          <img src=\"assets/default-profile.png\" alt=\"Default profile\" />\n        </Link>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './Footer.scss';\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"Footer\">\n      Neighborhood Meal Sharing <br />\n      Dinr | Copyright 2019\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './Banner.scss';\nimport { Link } from 'react-router-dom';\n\nconst Banner: React.FC = () => {\n  return (\n    <Link to=\"/create\" className=\"Banner\">\n      <h1>\n        <span>HOST YOUR OWN</span><br />DINR</h1>\n    </Link>\n  );\n}\n\nexport default Banner;\n","import {Time} from '../interfaces';\n\nexport default (military: Time): string => {\n    if (military === 0) {\n        return `12:00AM`;\n    } else if (military < 12) {\n        return `${military}:00AM`;\n    } else if (military === 12) {\n        return `12:00PM`;\n    } else {\n        return `${military-12}:00PM`;\n    }\n}","import React from 'react';\nimport Banner from '../common/Banner';\nimport dinners from '../assets/dinners-snapshot.json';\nimport zipcodes from '../assets/zipcodes.json';\nimport futureDateStrings from '../services/future-date-strings';\nimport militaryToStandardTime from '../services/military-to-standard-time';\nimport { Dinner } from '../interfaces';\nimport { Link } from 'react-router-dom';\nimport './Results.scss';\n\ninterface ResultsProps {\n  searchState: string;\n  searchCity: string;\n  selectedListing: any;\n  setSelectedListing: any;\n}\n\nconst Results: React.FC<ResultsProps> = props => {\n\n  const city: string = props.searchCity.toLocaleLowerCase();\n  const state: string = props.searchState;\n  let codes = [];\n  let listings: Dinner[] = [];\n\n  if (zipcodes[state] && zipcodes[state][city]) {\n    codes = zipcodes[state][city];\n  }\n\n  if (codes.length) {\n    const dates = futureDateStrings();\n    codes.forEach((code: string) => {\n      dates.forEach((date: string) => {\n        if (dinners[code] && dinners[code][date]) {\n          Object.keys(dinners[code][date]).forEach(time => {\n            Object.keys(dinners[code][date][time]).forEach(uid => {\n              const listing: Dinner = {\n                ...dinners[code][date][time][uid],\n                uri: `${code}/${date}/${time}/${uid}`\n              };\n              listings.push(listing);\n            });\n          });\n        }\n      });\n    });\n  }\n\n  return (\n    <div className=\"Results\">\n      <Banner />\n      {\n        !listings.length ?\n          <h2>There are no listings for this area, sorry!</h2> :\n          <h2>Upcoming Dinners</h2>\n      }\n      {\n        // TODO: create seperate component for listing\n        listings.length ?\n          listings.map((listing: any, index: number) => {\n            return (\n              <Link to={`/listing/${listing.uri}`}\n                key={`listing-${index}`}\n                className=\"listing\"\n                onClick={() => props.setSelectedListing(listing.uri)}>\n                <h3>{listing.title}</h3>\n                <p className=\"description\">{listing.description}</p>\n                <p className=\"details\">\n                  <span><b>Date: </b>{`${listing.date.month}/${listing.date.day}/${listing.date.year}`}</span>\n                  <span><b>Time: </b>{militaryToStandardTime(listing.time)}</span>\n                  <span><b>Plates: </b>{listing.plates}</span>\n                  <span><b>Price: </b>${listing.price}</span>\n                </p>\n              </Link>\n            )\n          }) :\n          null\n      }\n    </div>\n  );\n}\n\nexport default Results;\n","export default (start?: string): string[] => {\n    const date = start ? new Date(start) : new Date();\n    let month = date.getMonth() + 1;\n    let day = date.getDate();\n    let year = date.getFullYear();\n    let dates: string[] = [];\n    for (let num = 0; num < 30; num++) {\n      let dayString = (day.toString().length === 1) ? `0${day}` : day;\n      let monthString = (month.toString().length === 1) ? `0${month}` : month;\n      let dateString = `${monthString}${dayString}${year}`;\n      dates.push(dateString);\n      day++;\n      if (day > 31) {\n        day = 1;\n        month++;\n        month = month > 12 ? 1 : month;\n        year = month === 1 ? year + 1 : year;\n      }\n    }\n    return dates;\n}","import { Date } from '../interfaces';\n\nexport default (date: Date): string => {\n    let { month, day, year } = date;\n    const dayString = day < 10 ? `0${day}`: day;\n    const monthString = month < 10 ? `0${month}`: month;\n    return `${monthString}/${dayString}/${year}`;\n}","import React from 'react';\nimport Profiles from '../assets/profiles-snapshot.json';\nimport acceptedPayments from '../services/accepted-payments';\nimport './Listing-Details-Profile.scss';\n\ninterface ListingDetailsProfileProps {\n    profile: any;\n}\n\nconst ListingDetailsProfile: React.FC<ListingDetailsProfileProps> = props => {\n    const profile = Profiles[props.profile];\n    const { payment, personal } = profile;\n    const { name, street } = personal;\n    return (\n        <div className=\"Listing-Details-Profile\">\n            <h3>Hosted by {name}</h3>\n            <ul>\n                <li><b>Address: </b>{street}</li>\n                <li><b>Payments: </b>{acceptedPayments(payment)}</li>\n            </ul>\n        </div>\n    );\n}\n\nexport default ListingDetailsProfile;","import { Payment } from '../interfaces';\n\nexport default (payments: Payment): string => {\n    let filtered = Object.keys(payments)\n        .filter(key => payments[key])\n        .map(string => {\n            if (string === 'paypal') {\n                return 'PayPal';\n            } else if (string === 'cashapp') {\n                return 'Cash App';\n            } else {\n                return string.charAt(0).toUpperCase() + string.slice(1);\n            }\n        });\n\n    if (filtered.length === 1) {\n        return `Only ${filtered[0]}`\n    } else if (filtered.length === 2) {\n        return `${filtered[0]} and ${filtered[1]}`;\n    } else if (filtered.length > 2) {\n        filtered[filtered.length - 1] = `and ${filtered[filtered.length - 1]}`;\n        return filtered.join(', ');\n    } else {\n        return `No Payment`;\n    }\n}","import React from 'react';\nimport dateObjectToStamp from '../services/date-object-to-stamp';\nimport militaryToStandardTime from '../services/military-to-standard-time';\nimport { Link } from 'react-router-dom';\nimport ListingDetailsProfile from './Listing-Details-Profile';\nimport './Listing-Details.scss';\n\ninterface ListingDetailsProps {\n    listing: any;\n    uri: string;\n}\n\nconst ListingDetails: React.FC<ListingDetailsProps> = props => {\n    const { title, description, plates, price, time, date, profile } = props.listing;\n    return (\n        <div className=\"Listing-Details\">\n            <h2>{title}</h2>\n            <p>{description}</p>\n            <ul>\n                <li><b>Date: </b>{dateObjectToStamp(date)}</li>\n                <li><b>Time: </b>{militaryToStandardTime(time)}</li>\n                <li><b>Plates: </b>{plates}</li>\n                <li><b>Price: </b>${price}</li>\n            </ul>\n            <ListingDetailsProfile profile={profile} />\n            <Link to={`/rsvp/${props.uri}`} className=\"btn confirm\">RSVP</Link>\n            <br />\n            <Link to={`/`} className=\"btn\">Return to results</Link>\n        </div>\n    );\n}\n\nexport default ListingDetails;","import React from 'react';\nimport Dinners from '../assets/dinners-snapshot.json';\nimport ListingDetails from '../common/Listing-Details';\nimport './Listing.scss';\n\ninterface ListingProps {\n    selectedListing: any;\n    setSelectedListing: any;\n}\n\nconst Listing: React.FC<ListingProps> = props => {\n\n    if (window.location.hash) {\n        let { hash } = window.location;\n        hash = hash.replace('#/listing/', '');\n        props.setSelectedListing(hash);\n    }\n\n    // TODO: move get listing to seperate service\n    let listing = null;\n    if (props.selectedListing) {\n        let node: any = Dinners;\n        const path = props.selectedListing.split('/');\n        path.some((key: string, index: number) => {\n            node = (!node[key]) ? false : node[key];\n            if (path.length - 1 === index) {\n                listing = node;\n            } else if (!node) {\n                listing = false;\n            }\n            return (!node);\n        });\n    }\n\n    return (\n        <div className=\"Listing\">\n            {\n                (!listing) ?\n                    (listing === false) ?\n                        <h2>Could not find listing...</h2> :\n                        <h2>Loading...</h2> : <ListingDetails listing={listing} uri={props.selectedListing} />\n            }\n        </div>\n    );\n}\n\nexport default Listing;\n","import React, { useState } from 'react';\nimport './Account.scss';\nimport * as firebase from 'firebase/app';\nimport 'firebase/database';\nimport { Profile } from '../interfaces'\nimport * as zipcodeToStateAndCity from '../assets/reverse-zipcode.json';\n\ninterface AccountProps {\n    currentUser: any;\n    currentProfile: any;\n    setCurrentProfile: any;\n    setCurrentUser: any;\n    setSearchState: any;\n    setSearchCity: any;\n}\n\nconst Account: React.FC<AccountProps> = props => {\n    const [createAccountToggle, setCreateAccountToggle] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [successMessage, setSuccessMessage] = useState('');\n\n    const isZipcodeValid = (zipcode: string): boolean => (Number(zipcode) > 10000 && Number(zipcode) < 99999);\n\n    const getProfileSnapshot = () => firebase\n        .database()\n        .ref(`profiles/${props.currentUser.uid}`)\n        .once('value')\n        .then(snapshot => props.setCurrentProfile(snapshot.val()));\n\n    const updateAccountHandler = (event?: any) => {\n        if (event) {\n            event.preventDefault();\n        }\n        const form = event ? event.target : null;\n        const name = form ? form.querySelector('#name').value : '';\n        const zipcode = form ? form.querySelector('#zipcode').value : '';\n        const street = form ? form.querySelector('#street').value : '';\n        let accepted: string[] = [];\n        if (form) {\n            form.querySelectorAll('input[name=\"payments\"]:checked')\n                .forEach((elem: any) => accepted.push(elem.value));\n        }\n        const payments = (accepted.length) ? {\n            cash: (accepted.indexOf('cash') !== -1),\n            venmo: (accepted.indexOf('venmo') !== -1),\n            paypal: (accepted.indexOf('paypal') !== -1),\n            cashapp: (accepted.indexOf('cashapp') !== -1),\n        } : { cash: true, venmo: false, paypal: false, cashapp: false };\n        const personal = { name, zipcode, street };\n        if (zipcode && !isZipcodeValid(zipcode)) {\n            setErrorMessage('The zipcode that you entered is invalid.');\n            delayedMessageReset();\n        } else {\n            Promise.all([\n                new Promise(res => {\n                    firebase\n                        .database()\n                        .ref(`profiles/${props.currentUser.uid}/personal`)\n                        .set(personal)\n                        .then(() => res())\n                        .catch(error => setErrorMessage(error.message));\n                }),\n                new Promise(res => {\n                    firebase.database()\n                        .ref(`profiles/${props.currentUser.uid}/payments`)\n                        .set(payments)\n                        .then(() => res())\n                        .catch(error => setErrorMessage(error.message));\n                })\n            ]).then(() => {\n                setSuccessMessage('Your profile has been updated!');\n                delayedMessageReset();\n                getProfileSnapshot();\n                let [state, city]= zipcodeToStateAndCity[zipcode].split(':');\n                props.setSearchCity(city);\n                props.setSearchState(state);\n            }).catch(() => delayedMessageReset());\n        }\n    }\n\n    const signoutOfAccount = () => firebase.auth().signOut();\n\n    const delayedMessageReset = () => setTimeout(() => {\n        setErrorMessage('');\n        setSuccessMessage('');\n    }, 2500);\n\n    const signIntoAccountHandler = (event: any) => {\n        event.preventDefault();\n        const form = event.target;\n        const email = form.querySelector('#email').value;\n        const password = form.querySelector('#password').value;\n        firebase.auth()\n            .signInWithEmailAndPassword(email, password)\n            .catch(error => {\n                setErrorMessage(error.message);\n                delayedMessageReset();\n            });\n    }\n\n    async function createAccountHandler(event: any) {\n        event.preventDefault();\n        const form = event.target;\n        const email = form.querySelector('#email').value;\n        const password = form.querySelector('#password').value;\n        const reenter = form.querySelector('#reenter').value;\n        const zipcode = form.querySelector('#zipcode').value;\n        let user: firebase.User | null = null;\n        let uid: string | undefined;\n        if (!email || !password || !reenter || !zipcode) {\n            setErrorMessage('You forgot to to fill out an input');\n        } else if (password !== reenter) {\n            setErrorMessage('Your passwords do not match');\n        } else if (zipcode < 10000 || zipcode > 99999) {\n            setErrorMessage('The zipcode you entered is not valid');\n        } else {\n            await firebase\n                .auth()\n                .createUserWithEmailAndPassword(email, password)\n                .catch(error => {\n                    setErrorMessage(error.message);\n                });\n            if (!errorMessage) {\n                await firebase\n                    .auth()\n                    .signInWithEmailAndPassword(email, password)\n                    .then(creds => {\n                        user = creds.user;\n                        uid = user?.uid;\n                    }).catch(error => {\n                        setErrorMessage(error.message);\n                    });\n            }\n            if (!errorMessage && user) {\n                const template: Profile = {\n                    personal: { zipcode },\n                    payments: { cash: true, venmo: false, cashapp: false, paypal: false },\n                    dinners: { host: [], eaten: [] },\n                    reviews: { left: [], recieved: [] }\n                };\n                await firebase\n                    .database()\n                    .ref(`profiles/${uid}`)\n                    .set(template)\n                    .then(() => {\n                        props.setCurrentProfile(template);\n                        props.setCurrentUser(user);\n                        setCreateAccountToggle(false);\n                    }).catch(error => setErrorMessage(error.message));\n            }\n        }\n        delayedMessageReset();\n    }\n\n    const createAccountToggleHandler = (event: any) => {\n        event.preventDefault();\n        setCreateAccountToggle(!createAccountToggle);\n    }\n\n    if (props.currentUser && props.currentProfile) {\n        const { name, zipcode, street } = props.currentProfile.personal;\n        const { email } = props.currentUser;\n        const { cash, venmo, cashapp, paypal } = props.currentProfile.payments;\n        return (\n            <div className=\"Account\">\n                <h2>Account Settings</h2>\n                <p>We strive to transparent to our users by providing you with information about how we use your data. By only requiring the necessary information to make the app function and not over monitoring user activity, we can protect our users' privacy.</p>\n                <br />\n                <form onSubmit={updateAccountHandler}>\n                    <label>Your Email</label>\n                    <input\n                        id=\"email\"\n                        type=\"text\"\n                        placeholder=\"john@domain.com\"\n                        defaultValue={email}\n                        disabled\n                    />\n                    <span>This is the email you used to create this account and cannot be changed at the moment. We use your email to create a unique profile for you and send you reservation updates.</span>\n                    <label>Your Name</label>\n                    <input\n                        defaultValue={name}\n                        id=\"name\"\n                        type=\"text\"\n                        placeholder=\"John Doe\"\n                    />\n                    <span>We use your name to let hosts know who is coming and guests know who is cooking. Although it is not required, it is highly recommended that you add your name.</span>\n                    <label>Zipcode</label>\n                    <input\n                        defaultValue={zipcode}\n                        id=\"zipcode\"\n                        type=\"number\"\n                        placeholder=\"95102\"\n                    />\n                    <span>We use your zipcode to show you dinners in your area and help guests find your dinners. This field is not required if you are not hosting a dinner but will help you find dinners.</span>\n                    <br /><br />\n                    <h3>Hosting Information</h3>\n                    <p>If you plan on hosting a dinner we will need you to provide an address, zipcode, and forms of accepted payments. You will encounter an error that will redirect you here when creating a dinner without supplying all the necessary data.</p>\n                    <label>Street</label>\n                    <input\n                        defaultValue={street}\n                        id=\"street\"\n                        type=\"text\"\n                        placeholder=\"123 Main Street\"\n                    />\n                    <span>We use your address to direct your guests to your dinner.</span>\n                    <br /><br />\n                    <input\n                        type=\"checkbox\"\n                        name=\"payments\"\n                        value=\"cash\"\n                        defaultChecked={cash}\n                    /> Cash<br />\n                    <input\n                        type=\"checkbox\"\n                        name=\"payments\"\n                        value=\"venmo\"\n                        defaultChecked={venmo}\n                    /> Venmo<br />\n                    <input\n                        type=\"checkbox\"\n                        name=\"payments\"\n                        value=\"cashapp\"\n                        defaultChecked={cashapp}\n                    /> Cash App<br />\n                    <input\n                        type=\"checkbox\"\n                        name=\"payments\"\n                        value=\"paypal\"\n                        defaultChecked={paypal}\n                    /> PayPal<br />\n                    {(errorMessage) ? <span id=\"error\">{errorMessage}</span> : null}\n                    {(successMessage) ? <span id=\"success\">{successMessage}</span> : null}\n                    <input type=\"submit\" className=\"btn confirm\" value=\"Save Changes\" />\n                </form>\n                <br />\n                <button onClick={signoutOfAccount} className=\"btn\">Sign Out</button>\n            </div>\n        )\n    } else if (!createAccountToggle) {\n        return (\n            <div className=\"Account\">\n                <h2>Sign In</h2>\n                <form onSubmit={signIntoAccountHandler}>\n                    <label>Email</label>\n                    <input id=\"email\" type=\"email\" placeholder=\"johndoe@domain.com\" />\n                    <label>Password</label>\n                    <input id=\"password\" type=\"password\" placeholder=\"•••••••••\" />\n                    {(errorMessage) ? <span id=\"error\">{errorMessage}</span> : null}\n                    <input type=\"submit\" className=\"btn confirm\" value=\"Sign In\" />\n                    <br />\n                </form>\n                <button className=\"btn\" onClick={createAccountToggleHandler}>Create Account</button>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"Account\">\n                <h2>Let's get cookin!</h2>\n                <form onSubmit={createAccountHandler}>\n                    <label>Email</label>\n                    <input id=\"email\" type=\"email\" placeholder=\"johndoe@domain.com\" />\n                    <label>Password</label>\n                    <input id=\"password\" type=\"password\" placeholder=\"•••••••••\" />\n                    <label>Re-Enter Password</label>\n                    <input id=\"reenter\" type=\"password\" placeholder=\"•••••••••\" />\n                    <label>Zipcode</label>\n                    <input id=\"zipcode\" type=\"number\" placeholder=\"95112\" />\n                    {(errorMessage) ? <span id=\"error\">{errorMessage}</span> : null}\n                    <input type=\"submit\" className=\"btn confirm\" value=\"Create Account\" />\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Account;\n","import React from 'react';\nimport './Create.scss';\nimport { Link } from 'react-router-dom';\n\ninterface CreateProps {\n}\n\nconst Create: React.FC<CreateProps> = props => {\n\n    const handler = (event: any) => {\n        event.preventDefault();\n    }\n\n    return (\n        <div className=\"Create\">\n            <h2>Host A Dinner</h2>\n            <form onSubmit={handler}>\n                <label>Title</label>\n                <input type=\"text\" placeholder=\"Taco Night\" />\n                <label>Description</label>\n                <textarea placeholder=\"We are having tacos at our place...\"></textarea>\n                <label>Plates</label>\n                <input type=\"number\" placeholder=\"7\" />\n                <label>Price (USD)</label>\n                <input type=\"number\" placeholder=\"5\" />\n                <label>Date</label>\n                <input type=\"date\" placeholder=\"XX/XX/20XX\" />\n                <label>Time</label>\n                <input type=\"time\" placeholder=\"1:00 PM\" />\n                <br /><br />\n                <input type=\"submit\" value=\"Post your dinner\" className=\"btn confirm\" />\n            </form>\n            <br />\n            <Link to=\"/\" className=\"btn\">Cancel and return to results</Link>\n        </div>\n    )\n}\n\nexport default Create;\n","import React, { useState } from 'react';\nimport getListingFromHash from '../services/get-listing-from-hash';\nimport dateObjectToStamp from '../services/date-object-to-stamp';\nimport miltaryToStandardTime from '../services/military-to-standard-time';\nimport { Link } from 'react-router-dom';\nimport './RSVP.scss';\n\ninterface RSVPProps {\n    selectedListing: any;\n    setSelectedListing: any;\n}\n\nconst RSVP: React.FC<RSVPProps> = props => {\n\n    if (!props.selectedListing) {\n        props.setSelectedListing(window.location.hash.replace('#/rsvp/', ''));\n    }\n\n    const [confirmed, setConfirmed] = useState(false);\n    const listing = getListingFromHash(props.selectedListing);\n\n    const confirm = () => {\n        setConfirmed(true);\n    }\n\n    const cancel = () => {\n        setConfirmed(false);\n    }\n\n    if (listing) {\n        const { title, time, date } = listing;\n        if (confirmed) {\n            return (\n                <div className=\"RSVP\">\n                    <h2>You're Confirmed!</h2>\n                    <p>\n                        You've successfully RSVP'd your seat for \"{title}\" on {dateObjectToStamp(date)} at {miltaryToStandardTime(time)}.\n                        It will cost $7 for your meal and it is located at 123 Main Street.\n                        A reminder of this dinner has been added to your homepage!\n                </p>\n                    <button onClick={cancel} className=\"btn discard\">Cancel RSVP</button>\n                    <br />\n                    <Link to={`/`} className=\"btn\">Return to results</Link>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"RSVP\">\n                    <h2>Please Confirm</h2>\n                    <p>\n                        You will be attending \"{title}\" on {dateObjectToStamp(date)} at {miltaryToStandardTime(time)}.\n                        It will cost $7 for your meal and it is located at 123 Main Street.\n                </p>\n                    <button onClick={confirm} className=\"btn confirm\">Yes, I'll be there!</button>\n                    <br />\n                    <Link to={`/listing/${props.selectedListing}`} className=\"btn\">No, I'd like to cancel.</Link>\n                </div>\n            );\n        }\n    } else {\n        return (\n            <div className=\"RSVP\">\n                <h2>Could not find listing...</h2>\n            </div>\n        );\n    }\n}\n\nexport default RSVP;\n","import dinners from '../assets/dinners-snapshot.json';\n\nexport default (uri: string): any => {\n    if (!uri) {\n        return false;\n    }\n    const parts = uri.split('/');\n    let listing = dinners;\n    parts.forEach(part => {\n        if (!listing[part]) {\n            return false;\n        } else {\n            listing = listing[part];\n        }\n    })\n    return listing;\n}","import React, { useState } from 'react';\n\n// components\nimport Navbar from './common/Navbar';\nimport Footer from './common/Footer';\nimport Results from './containers/Results';\nimport Listing from './containers/Listing';\nimport Account from './containers/Account';\nimport Create from './containers/Create';\nimport RSVP from './containers/RSVP';\n\n// app specific\nimport './App.scss';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/analytics';\nimport 'firebase/database';\nimport firebaseConfig from './assets/firebase-config.json';\nimport { Profile } from './interfaces';\nimport zipcodeToStateAndCity from './assets/reverse-zipcode.json';\n\nconst App: React.FC = props => {\n  const [searchState, setSearchState] = useState('mi');\n  const [searchCity, setSearchCity] = useState('Saginaw');\n  const [selectedListing, setSelectedListing] = useState(null);\n  const [currentUser, setCurrentUser] = useState<firebase.User | null>(null);\n  const [currentProfile, setCurrentProfile] = useState<Profile | null>(null);\n\n  // init firebase\n  if (!firebase.apps.length) {\n    firebase.initializeApp(firebaseConfig);\n    firebase.analytics();\n  }\n\n  // current user managment\n  firebase.auth().onAuthStateChanged(user => {\n    setCurrentUser(user);\n    if (user && !currentProfile && currentUser) {\n      firebase\n        .database()\n        .ref(`profiles/${user.uid}`)\n        .once('value')\n        .then(snapshot => {\n          const profile: Profile = snapshot.val();\n          let code = null;\n          if (profile.personal?.zipcode) {\n            const { zipcode } = profile.personal;\n            code = zipcodeToStateAndCity[zipcode];\n          }\n          if (code) {\n            const [city, state] = code.split(':');\n            setSearchCity(city);\n            setSearchState(state);\n          }\n          setCurrentProfile(profile);\n        });\n    } else if (!currentUser) {\n      setCurrentProfile(null);\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar\n          setSearchState={setSearchState}\n          searchState={searchState}\n          setSearchCity={setSearchCity}\n          searchCity={searchCity}\n        />\n        <Switch>\n          <Route exact path=\"/\">\n            <Results\n              searchState={searchState}\n              searchCity={searchCity}\n              selectedListing={selectedListing}\n              setSelectedListing={setSelectedListing}\n            />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route path=\"/listing/:uri\">\n            <Listing\n              selectedListing={selectedListing}\n              setSelectedListing={setSelectedListing}\n            />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route path=\"/account\">\n            <Account\n              currentUser={currentUser}\n              setCurrentUser={setCurrentUser}\n              currentProfile={currentProfile}\n              setCurrentProfile={setCurrentProfile}\n              setSearchState={setSearchState}\n              setSearchCity={setSearchCity}\n            />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route path=\"/rsvp/:uri\">\n            <RSVP\n              selectedListing={selectedListing}\n              setSelectedListing={setSelectedListing}\n            />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route exact path=\"/create\">\n            <Create />\n          </Route>\n        </Switch>\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}