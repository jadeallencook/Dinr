{"version":3,"sources":["common/Navbar.tsx","common/Footer.tsx","common/Banner.tsx","services/military-to-standard-time.ts","containers/Results.tsx","services/future-date-strings.ts","services/date-object-to-stamp.ts","common/Listing-Details-Profile.tsx","services/accepted-payments.ts","common/Listing-Details.tsx","containers/Listing.tsx","containers/Account.tsx","containers/Create.tsx","containers/RSVP.tsx","services/get-listing-from-hash.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","props","className","to","onChange","event","setSearchCity","target","value","placeholder","type","defaultValue","searchCity","setSearchState","searchState","states","map","state","key","toUpperCase","src","alt","Footer","Banner","military","Results","city","toLocaleLowerCase","codes","listings","zipcodes","length","dates","start","date","Date","month","getMonth","day","getDate","year","getFullYear","num","dayString","toString","monthString","dateString","push","futureDateStrings","forEach","code","dinners","Object","keys","time","uid","listing","uri","index","onClick","setSelectedListing","title","description","militaryToStandardTime","plates","price","ListingDetailsProfile","Profiles","profile","personal","name","street","ListingDetails","dateObjectToStamp","Listing","window","location","hash","replace","selectedListing","node","Dinners","path","split","some","Account","onSubmit","preventDefault","form","querySelector","zipcode","console","log","id","Create","RSVP","useState","confirmed","setConfirmed","parts","part","getListingFromHash","miltaryToStandardTime","App","currentUser","setCurrentUser","exact","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a3f39da.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.scss';\nimport states from '../assets/states.json';\nimport { Link } from 'react-router-dom';\n\ninterface NavbarProps {\n  setSearchState: any;\n  searchState: string;\n  setSearchCity: any;\n  searchCity: string;\n}\n\nconst Navbar: React.FC<NavbarProps> = props => {\n\n  const searchStateHandler = (event: any): void => {\n    props.setSearchState(event.target.value);\n  }\n\n  const searchCityHandler = (event: any): void => {\n    props.setSearchCity(event.target.value);\n  }\n\n  return (\n    <nav className=\"Navbar\">\n      <div>\n        <Link to=\"/\">DINR</Link>\n      </div>\n      <div>\n        <input\n          onChange={searchCityHandler}\n          placeholder=\"City\"\n          type=\"text\"\n          defaultValue={props.searchCity} />\n        <select\n          onChange={searchStateHandler}\n          defaultValue={props.searchState}>\n          {\n            states.map((state: string) => {\n              return (\n                <option\n                  key={state}\n                  value={state}\n                >\n                  {state.toUpperCase()}\n                </option>\n              );\n            })\n          }\n        </select>\n      </div>\n      <div>\n        <Link to=\"/account\">\n          <img src=\"assets/default-profile.png\" alt=\"Default profile\" />\n        </Link>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './Footer.scss';\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"Footer\">\n      Neighborhood Meal Sharing <br />\n      Dinr | Copyright 2019\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './Banner.scss';\nimport { Link } from 'react-router-dom';\n\nconst Banner: React.FC = () => {\n  return (\n    <Link to=\"/create\" className=\"Banner\">\n      <h1>\n        <span>HOST YOUR OWN</span><br />DINR</h1>\n    </Link>\n  );\n}\n\nexport default Banner;\n","import {Time} from '../interfaces';\n\nexport default (military: Time): string => {\n    if (military === 0) {\n        return `12:00AM`;\n    } else if (military < 12) {\n        return `${military}:00AM`;\n    } else if (military === 12) {\n        return `12:00PM`;\n    } else {\n        return `${military-12}:00PM`;\n    }\n}","import React from 'react';\nimport Banner from '../common/Banner';\nimport dinners from '../assets/dinners-snapshot.json';\nimport zipcodes from '../assets/zipcodes.json';\nimport futureDateStrings from '../services/future-date-strings';\nimport militaryToStandardTime from '../services/military-to-standard-time';\nimport { Dinner } from '../interfaces';\nimport { Link } from 'react-router-dom';\nimport './Results.scss';\n\ninterface ResultsProps {\n  searchState: string;\n  searchCity: string;\n  selectedListing: any;\n  setSelectedListing: any;\n}\n\nconst Results: React.FC<ResultsProps> = props => {\n\n  const city: string = props.searchCity.toLocaleLowerCase();\n  const state: string = props.searchState;\n  let codes = [];\n  let listings: Dinner[] = [];\n\n  if (zipcodes[state] && zipcodes[state][city]) {\n    codes = zipcodes[state][city];\n  }\n\n  if (codes.length) {\n    const dates = futureDateStrings();\n    codes.forEach((code: string) => {\n      dates.forEach((date: string) => {\n        if (dinners[code] && dinners[code][date]) {\n          Object.keys(dinners[code][date]).forEach(time => {\n            Object.keys(dinners[code][date][time]).forEach(uid => {\n              const listing: Dinner = {\n                ...dinners[code][date][time][uid],\n                uri: `${code}/${date}/${time}/${uid}`\n              };\n              listings.push(listing);\n            });\n          });\n        }\n      });\n    });\n  }\n\n  return (\n    <div className=\"Results\">\n      <Banner />\n      {\n        !listings.length ?\n          <h2>There are no listings for this area, sorry!</h2> :\n          <h2>Upcoming Dinners</h2>\n      }\n      {\n        // TODO: create seperate component for listing\n        listings.length ?\n          listings.map((listing: any, index: number) => {\n            return (\n              <Link to={`/listing/${listing.uri}`}\n                key={`listing-${index}`}\n                className=\"listing\"\n                onClick={() => props.setSelectedListing(listing.uri)}>\n                <h3>{listing.title}</h3>\n                <p className=\"description\">{listing.description}</p>\n                <p className=\"details\">\n                  <span><b>Date: </b>{`${listing.date.month}/${listing.date.day}/${listing.date.year}`}</span>\n                  <span><b>Time: </b>{militaryToStandardTime(listing.time)}</span>\n                  <span><b>Plates: </b>{listing.plates}</span>\n                  <span><b>Price: </b>${listing.price}</span>\n                </p>\n              </Link>\n            )\n          }) :\n          null\n      }\n    </div>\n  );\n}\n\nexport default Results;\n","export default (start?: string): string[] => {\n    const date = start ? new Date(start) : new Date();\n    let month = date.getMonth() + 1;\n    let day = date.getDate();\n    let year = date.getFullYear();\n    let dates: string[] = [];\n    for (let num = 0; num < 30; num++) {\n      let dayString = (day.toString().length === 1) ? `0${day}` : day;\n      let monthString = (month.toString().length === 1) ? `0${month}` : month;\n      let dateString = `${monthString}${dayString}${year}`;\n      dates.push(dateString);\n      day++;\n      if (day > 31) {\n        day = 1;\n        month++;\n        month = month > 12 ? 1 : month;\n        year = month === 1 ? year + 1 : year;\n      }\n    }\n    return dates;\n}","import { Date } from '../interfaces';\n\nexport default (date: Date): string => {\n    let { month, day, year } = date;\n    const dayString = day < 10 ? `0${day}`: day;\n    const monthString = month < 10 ? `0${month}`: month;\n    return `${monthString}/${dayString}/${year}`;\n}","import React from 'react';\nimport Profiles from '../assets/profiles-snapshot.json';\nimport acceptedPayments from '../services/accepted-payments';\nimport './Listing-Details-Profile.scss';\n\ninterface ListingDetailsProfileProps {\n    profile: any;\n}\n\nconst ListingDetailsProfile: React.FC<ListingDetailsProfileProps> = props => {\n    const profile = Profiles[props.profile];\n    const { name, street } = profile.personal;\n    return (\n        <div className=\"Listing-Details-Profile\">\n            <h3>Hosted by {name}</h3>\n            <ul>\n                <li><b>Address: </b>{street}</li>\n                <li><b>Payments: </b>{acceptedPayments('')}</li>\n            </ul>\n        </div>\n    );\n}\n\nexport default ListingDetailsProfile;","export default (payments: any): string => {\n    return `Cash and Venmo`;\n}","import React from 'react';\nimport dateObjectToStamp from '../services/date-object-to-stamp';\nimport militaryToStandardTime from '../services/military-to-standard-time';\nimport { Link } from 'react-router-dom';\nimport ListingDetailsProfile from './Listing-Details-Profile';\nimport './Listing-Details.scss';\n\ninterface ListingDetailsProps {\n    listing: any;\n    uri: string;\n}\n\nconst ListingDetails: React.FC<ListingDetailsProps> = props => {\n    const { title, description, plates, price, time, date, profile } = props.listing;\n    return (\n        <div className=\"Listing-Details\">\n            <h2>{title}</h2>\n            <p>{description}</p>\n            <ul>\n                <li><b>Date: </b>{dateObjectToStamp(date)}</li>\n                <li><b>Time: </b>{militaryToStandardTime(time)}</li>\n                <li><b>Plates: </b>{plates}</li>\n                <li><b>Price: </b>${price}</li>\n            </ul>\n            <ListingDetailsProfile profile={profile} />\n            <Link to={`/rsvp/${props.uri}`} className=\"btn confirm\">RSVP</Link>\n            <br />\n            <Link to={`/`} className=\"btn\">Return to results</Link>\n        </div>\n    );\n}\n\nexport default ListingDetails;","import React from 'react';\nimport Dinners from '../assets/dinners-snapshot.json';\nimport ListingDetails from '../common/Listing-Details';\nimport './Listing.scss';\n\ninterface ListingProps {\n    selectedListing: any;\n    setSelectedListing: any;\n}\n\nconst Listing: React.FC<ListingProps> = props => {\n\n    if (window.location.hash) {\n        let { hash } = window.location;\n        hash = hash.replace('#/listing/', '');\n        props.setSelectedListing(hash);\n    }\n\n    // TODO: move get listing to seperate service\n    let listing = null;\n    if (props.selectedListing) {\n        let node: any = Dinners;\n        const path = props.selectedListing.split('/');\n        path.some((key: string, index: number) => {\n            node = (!node[key]) ? false : node[key];\n            if (path.length - 1 === index) {\n                listing = node;\n            } else if (!node) {\n                listing = false;\n            }\n            return (!node);\n        });\n    }\n\n    return (\n        <div className=\"Listing\">\n            {\n                (!listing) ?\n                    (listing === false) ?\n                        <h2>Could not find listing...</h2> :\n                        <h2>Loading...</h2> : <ListingDetails listing={listing} uri={props.selectedListing} />\n            }\n        </div>\n    );\n}\n\nexport default Listing;\n","import React from 'react';\nimport './Account.scss';\n\ninterface AccountProps {\n    currentUser: any;\n    setCurrentUser: any;\n}\n\nconst Account: React.FC<AccountProps> = props => {\n\n    const handler = (event: any) => {\n        event.preventDefault();\n        const form = event.target;\n        const name = form.querySelector('#name').value;\n        const zipcode = form.querySelector('#zipcode').value;\n        const street = form.querySelector('#street').value;\n        console.log(name, zipcode, street);\n    }\n\n    return (\n        <div className=\"Account\">\n            <h2>Account Settings</h2>\n            <form onSubmit={handler}>\n                <label>Your Name</label>\n                <input id=\"name\" type=\"text\" placeholder=\"John Doe\" />\n                <span>We use your name to let hosts know who is coming and guests know who is cooking.</span>\n                <label>Zipcode</label>\n                <input id=\"zipcode\" type=\"number\" placeholder=\"95111\" />\n                <span>We use your zipcode to show you dinners in your area and help guests find your dinners.</span>\n                <br /><br />\n                <h3>Hosting Information</h3>\n                <label>Street</label>\n                <input id=\"street\" type=\"text\" placeholder=\"123 Main Street\" />\n                <span>We use your address to direct your guests to your dinner.</span>\n                <br /><br />\n                <input type=\"checkbox\" name=\"payments\" value=\"cash\" /> Cash<br />\n                <input type=\"checkbox\" name=\"payments\" value=\"venmo\" /> Venmo<br />\n                <input type=\"checkbox\" name=\"payments\" value=\"cashapp\" /> Cash App<br />\n                <input type=\"checkbox\" name=\"payments\" value=\"paypal\" /> PayPal<br />\n                <input type=\"submit\"  className=\"btn confirm\" value=\"Save Changes\" />\n            </form>\n        </div>\n    )\n}\n\nexport default Account;\n","import React from 'react';\nimport './Create.scss';\nimport { Link } from 'react-router-dom';\n\ninterface CreateProps {\n}\n\nconst Create: React.FC<CreateProps> = props => {\n\n    const handler = (event: any) => {\n        event.preventDefault();\n    }\n\n    return (\n        <div className=\"Create\">\n            <h2>Host A Dinner</h2>\n            <form onSubmit={handler}>\n                <label>Title</label>\n                <input type=\"text\" placeholder=\"Taco Night\" />\n                <label>Description</label>\n                <textarea placeholder=\"We are having tacos at our place...\"></textarea>\n                <label>Plates</label>\n                <input type=\"number\" placeholder=\"7\" />\n                <label>Price (USD)</label>\n                <input type=\"number\" placeholder=\"5\" />\n                <label>Date</label>\n                <input type=\"date\" placeholder=\"XX/XX/20XX\" />\n                <label>Time</label>\n                <input type=\"time\" placeholder=\"1:00 PM\" />\n                <br /><br />\n                <input type=\"submit\" value=\"Post your dinner\" className=\"btn confirm\" />\n            </form>\n            <br />\n            <Link to=\"/\" className=\"btn\">Cancel and return to results</Link>\n        </div>\n    )\n}\n\nexport default Create;\n","import React, { useState } from 'react';\nimport getListingFromHash from '../services/get-listing-from-hash';\nimport dateObjectToStamp from '../services/date-object-to-stamp';\nimport miltaryToStandardTime from '../services/military-to-standard-time';\nimport { Link } from 'react-router-dom';\nimport './RSVP.scss';\n\ninterface RSVPProps {\n    selectedListing: any;\n    setSelectedListing: any;\n}\n\nconst RSVP: React.FC<RSVPProps> = props => {\n\n    if (!props.selectedListing) {\n        props.setSelectedListing(window.location.hash.replace('#/rsvp/', ''));\n    }\n\n    const [confirmed, setConfirmed] = useState(false);\n    const listing = getListingFromHash(props.selectedListing);\n\n    const confirm = () => {\n        setConfirmed(true);\n    }\n\n    const cancel = () => {\n        setConfirmed(false);\n    }\n\n    if (listing) {\n        const { title, time, date } = listing;\n        if (confirmed) {\n            return (\n                <div className=\"RSVP\">\n                    <h2>You're Confirmed!</h2>\n                    <p>\n                        You've successfully RSVP'd your seat for \"{title}\" on {dateObjectToStamp(date)} at {miltaryToStandardTime(time)}.\n                        It will cost $7 for your meal and it is located at 123 Main Street.\n                        A reminder of this dinner has been added to your homepage!\n                </p>\n                    <button onClick={cancel} className=\"btn discard\">Cancel RSVP</button>\n                    <br />\n                    <Link to={`/`} className=\"btn\">Return to results</Link>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"RSVP\">\n                    <h2>Please Confirm</h2>\n                    <p>\n                        You will be attending \"{title}\" on {dateObjectToStamp(date)} at {miltaryToStandardTime(time)}.\n                        It will cost $7 for your meal and it is located at 123 Main Street.\n                </p>\n                    <button onClick={confirm} className=\"btn confirm\">Yes, I'll be there!</button>\n                    <br />\n                    <Link to={`/listing/${props.selectedListing}`} className=\"btn\">No, I'd like to cancel.</Link>\n                </div>\n            );\n        }\n    } else {\n        return (\n            <div className=\"RSVP\">\n                <h2>Could not find listing...</h2>\n            </div>\n        );\n    }\n}\n\nexport default RSVP;\n","import dinners from '../assets/dinners-snapshot.json';\n\nexport default (uri: string): any => {\n    if (!uri) {\n        return false;\n    }\n    const parts = uri.split('/');\n    let listing = dinners;\n    parts.forEach(part => {\n        if (!listing[part]) {\n            return false;\n        } else {\n            listing = listing[part];\n        }\n    })\n    return listing;\n}","import React, { useState } from 'react';\nimport Navbar from './common/Navbar';\nimport Footer from './common/Footer';\nimport Results from './containers/Results';\nimport Listing from './containers/Listing';\nimport Account from './containers/Account';\nimport Create from './containers/Create';\nimport RSVP from './containers/RSVP';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const [searchState, setSearchState] = useState('mi');\n  const [searchCity, setSearchCity] = useState('Saginaw');\n  const [selectedListing, setSelectedListing] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar\n          setSearchState={setSearchState}\n          searchState={searchState}\n          setSearchCity={setSearchCity}\n          searchCity={searchCity}\n        />\n        <Switch>\n          <Route exact path=\"/\">\n            <Results\n              searchState={searchState}\n              searchCity={searchCity}\n              selectedListing={selectedListing}\n              setSelectedListing={setSelectedListing}\n            />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route path=\"/listing/:uri\">\n            <Listing \n              selectedListing={selectedListing}\n              setSelectedListing={setSelectedListing}\n            />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route path=\"/account\">\n            <Account\n              currentUser={currentUser}\n              setCurrentUser={setCurrentUser}\n            />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route path=\"/rsvp/:uri\">\n            <RSVP\n              selectedListing={selectedListing}\n              setSelectedListing={setSelectedListing}\n            />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route exact path=\"/create\">\n            <Create />\n          </Route>\n        </Switch>\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}