{"version":3,"sources":["assets/dinr-logo.svg","assets/default-profile.png","common/Navbar/index.tsx","common/Footer/index.tsx","common/Loading/index.tsx","containers/Browse/index.tsx","containers/Account/index.tsx","containers/Error/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavbarComponent","className","src","Logo","alt","type","placeholder","DefaultProfile","FooterComponent","Loading","BrowseComponent","AccountComponent","ErrorComponent","App","useState","loading","setLoading","firebase","length","config","onAuthStateChanged","user","Navbar","exact","path","Browse","Account","component","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,uC,2XCA3CD,EAAOC,QAAU,IAA0B,6C,+ZCuB5BC,EAlBmB,WAChC,OACE,yBAAKC,UAAU,mBACb,6BACE,6BACE,yBAAKC,IAAKC,IAAMC,IAAI,eAEtB,6BACE,2BAAOC,KAAK,SAASC,YAAY,mBAEnC,6BACE,yBAAKJ,IAAKK,IAAgBH,IAAI,kBCHzBI,G,MAVmB,WAChC,OACE,yBAAKP,UAAU,mBACb,yCAAc,yDACd,6DACA,gDCISQ,G,MARW,WACxB,OACE,yBAAKR,UAAU,WACb,yBAAKA,UAAU,yBAAyBC,IAAKC,IAAMC,IAAI,qBCS9CM,G,MAbmB,WAChC,OACE,yBAAKT,UAAU,6BACb,yBAAKA,UAAU,UACb,4CACA,qCAEF,gDACA,oECDSU,G,MAPoB,WACjC,OACE,yBAAKV,UAAU,uBCOJW,G,MATkB,WAC/B,OACE,yBAAKX,UAAU,4BACb,yCACA,mDCgDSY,EAlCO,WAAO,IAAD,EACIC,oBAAkB,GADtB,mBACnBC,EADmB,KACVC,EADU,KAc1B,OAVKC,OAAcC,SACjBD,gBAAuBE,GACvBF,eAIFA,SAAgBG,oBAAmB,SAAAC,GACjCL,GAAW,MAIX,yBAAKf,UAAU,OACb,kBAAC,IAAD,KACGc,EAAU,kBAAC,EAAD,MAAc,KACzB,kBAACO,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,YAChB,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOC,UAAWf,KAEpB,kBAACgB,EAAD,SCrCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5fdfbaa1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dinr-logo.29733819.svg\";","module.exports = __webpack_public_path__ + \"static/media/default-profile.4788048f.png\";","import React from 'react';\nimport './style.scss';\nimport Logo from '../../assets/dinr-logo.svg';\nimport DefaultProfile from '../../assets/default-profile.png';\n\nconst NavbarComponent: React.FC = () => {\n  return (\n    <div className=\"NavbarComponent\">\n      <div>\n        <div>\n          <img src={Logo} alt=\"dinr logo\" />\n        </div>\n        <div>\n          <input type=\"number\" placeholder=\"Enter Zipcode\" />\n        </div>\n        <div>\n          <img src={DefaultProfile} alt=\"dinr logo\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavbarComponent;\n","import React from 'react';\nimport './style.scss';\n\nconst FooterComponent: React.FC = () => {\n  return (\n    <div className=\"FooterComponent\">\n      <p>Eat Dinr | <b>Neighborhood Meal Sharing</b></p>\n      <p>Developed in Saginaw, Michigan</p>\n      <p>Copyright 2020</p>\n    </div>\n  );\n};\n\nexport default FooterComponent;\n","import React from 'react';\nimport './style.scss';\nimport Logo from '../../assets/dinr-logo.svg';\n\nconst Loading: React.FC = () => {\n  return (\n    <div className=\"Loading\">\n      <img className=\"animated infinite flip\" src={Logo} alt=\"Eat Dinr Logo\" />\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from 'react';\nimport './style.scss';\n\nconst BrowseComponent: React.FC = () => {\n  return (\n    <div className=\"BrowseComponent container\">\n      <div className=\"banner\">\n        <p>HOST YOUR OWN</p>\n        <h1>DINR</h1>\n      </div>\n      <h2>Featured Dinners</h2>\n      <p>There are currently no listings...</p>\n    </div>\n  );\n}\n\nexport default BrowseComponent;\n","import React from 'react';\nimport './style.scss';\n\nconst AccountComponent: React.FC = () => {\n  return (\n    <div className=\"AccountComponent\">\n    </div>\n  );\n}\n\nexport default AccountComponent;\n","import React from 'react';\nimport './style.scss';\n\nconst ErrorComponent: React.FC = () => {\n  return (\n    <div className=\"ErrorComponent container\">\n      <h1>Error 404</h1>\n      <p>Dinner not found!</p>\n    </div>\n  );\n}\n\nexport default ErrorComponent;\n","import React, { useState } from 'react';\nimport './App.scss';\n\n// app specific\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport * as firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/analytics';\nimport 'firebase/auth';\nimport config from './assets/firebase-config.json';\n\n// common\nimport NavbarComponent from './common/Navbar';\nimport FooterComponent from './common/Footer';\nimport Loading from './common/Loading';\n\n// containers\nimport BrowseComponent from './containers/Browse';\nimport AccountComponent from './containers/Account';\nimport ErrorComponent from './containers/Error';\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState<Boolean>(true);\n\n  // init firebase\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    firebase.analytics();\n  }\n\n  // current user managment\n  firebase.auth().onAuthStateChanged(user => {\n    setLoading(false);\n  });\n\n  return (\n    <div className=\"App\">\n      <Router>\n        {loading ? <Loading /> : null}\n        <NavbarComponent />\n        <Switch>\n          <Route exact path=\"/\">\n            <BrowseComponent />\n          </Route>\n          <Route exact path=\"/account\">\n            <AccountComponent />\n          </Route>\n          <Route component={ErrorComponent} />\n        </Switch>\n        <FooterComponent />\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport './normalize.scss';\nimport 'animate.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}